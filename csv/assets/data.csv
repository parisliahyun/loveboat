coursematerial,zeroorone,theendstring,integer,string  Week 1 ,3,theEnd   Command Line,3,theEnd  See the path of the current directory,1,theEnd  See the contents in the current directory (including hidden files),1,theEnd  Create new files and directories,1,theEnd  Change directories,1,theEnd  Copy files and directories,1,theEnd  Move files and directories,1,theEnd  Delete files and directories,1,theEnd  Open files and directories using Sublime,1,theEnd   Git & Github,3,theEnd  Explain the difference between Git and Github,0,theEnd  Initialize a local git repository,1,theEnd  Create a new repository on Github,1,theEnd  Clone a repository from Github,1,theEnd  Pull changes from a repository on Github,1,theEnd  Add and commit changes to a git repository,1,theEnd  Push changes from a local git repository to Github,1,theEnd  Fork an existing repository from Github,1,theEnd  Add and remove a remote,1,theEnd  Use Github to submit a pull request,1,theEnd"  Explain the difference between a fork, branch and clone",1,theEnd"  Explain the difference between a fetch, merge and pull",0,theEnd   Ruby basics & Strings,3,theEnd"  Describe the different types in Ruby (numbers, strings, collections, etc.)",1,theEnd  Explain the difference between a string and a symbol and when you would use each,1,theEnd  Manipulate strings using concatenation & interpolation,1,theEnd  Use common string methods to manipulate strings,1,theEnd   Ruby Collections & Enumeration,3,theEnd  Explain the difference between an array and a hash and when you would use each,1,theEnd"  Create an array, access items in an array, change the value of items in an array",1,theEnd"  Create a hash, access items in a hash, change the value of items in a hash",1,theEnd"  Create, access items in, change the value of items in, and manipulate items in nested collections (arrays & hashes)",0,theEnd  Use common array and hash methods to manipulate collections,1,theEnd  Explain what a block is,1,theEnd  Use built in Ruby methods to enumerate over a collection ,1,theEnd  Explain the difference between each and map,1,theEnd   Ruby Control Flow,3,theEnd"  Use boolean logic (&&, ||, !) to combine and manipulate boolean statements",1,theEnd"  Use if, else, elsif statements to control logic flow in a Ruby program",1,theEnd  Use the ternary operator for more concise if/else statements,0,theEnd  Use Ruby case statements,1,theEnd  Use while loops to execute code multiple times,1,theEnd   Ruby Methods,3,theEnd  Explain what a method is and why it is useful,1,theEnd  Define and use methods with arguments,1,theEnd  Return values from a method,1,theEnd   Ruby Objects,3,theEnd  Write a class with an initialize method,1,theEnd  Write setters and getters,1,theEnd  Explain when and why you would use use attr_accessor,1,theEnd  Define class and instance methods and explain the difference between the two,1,theEnd  Explain the use of self in Ruby,0,theEnd  Instantiate and use an object,1,theEnd  Write a class that inherits from another class,1,theEnd  Explain what a module is. How does it differ from a class?,0,theEnd"  Explain the difference between local, instance and class variables",1,theEnd   Ruby Other,3,theEnd  Reference the Ruby docs,1,theEnd  Explain what a gem is,1,theEnd  Debug a Ruby program using pry,1,theEnd  Create a multi file Ruby project using require & require_relative,1,theEnd  Follow a Ruby Style Guide,1,theEnd"  Name variables, classes and methods in a semantic way",1,theEnd  Explain the principle of DRY,1,theEnd  Week 2,3,theEnd  Networking,3,theEnd  Explain the parts of a url,0,theEnd  Explain what the client server model is,1,theEnd  Describe the basics of HTTP protocol. What is in an HTTP Request?,1,theEnd  Explain the difference between GET and POST and when you would use each,1,theEnd  Use HTML forms to submit HTTP Requests (GET and POST),1,theEnd  Explain what REST is,1,theEnd  TCP vs UDP,0,theEnd  IP,0,theEnd   Sinatra & Ruby,3,theEnd  Build a Sinatra app that responds to requests,1,theEnd  Write and match routes using Sinatra,1,theEnd  Use ERB templates and render views,1,theEnd  Pass values into views using instance variables,1,theEnd  Redirect a request,1,theEnd  Write a form that formats parameters as expected by the server,1,theEnd  Handle parameters (url parameters & form parameters),1,theEnd  Read data from a file and save data to a file,0,theEnd  Explain what a session is,1,theEnd  Explain what a cookie is,1,theEnd  HTML & CSS,3,theEnd  Create an HTML page and use common tags,1,theEnd  Link a stylesheet,1,theEnd  Use CSS Selectors and change the CSS properties of the element(s) selected,1,theEnd  Explain the difference between an id and a class and when you should use each,0,theEnd"  Place elements on the page keeping in mind the CSS box model (content, padding, border, margin)",1,theEnd"  Position elements using CSS (absolute, relative, fixed)",0,theEnd  Explain the basics of CSS specificity and precedence,0,theEnd  Create a static web page using HTML & CSS that matches a Photoshop mockup,1,theEnd  Week ,3,theEnd   SQL,3,theEnd  Explain what a database is and why you would use one,1,theEnd  Use psql to:,3,theEnd    Create a new database and connect to it,1,theEnd    Remove a database,1,theEnd    Create a table with an id primary key and other columns,1,theEnd    Remove a table,1,theEnd  Write basic SQL queries:,1,theEnd    SELECT,1,theEnd    INSERT,1,theEnd    UPDATE,0,theEnd    DELETE,1,theEnd"  Add, remove and alter columns in a database",0,theEnd"  Explain what ""auto incrementing primary key"" means for a database table",0,theEnd  Explain what a foreign key is and why you would use one,1,theEnd  Explain what a constraint is,1,theEnd  Modify SQL queries using WHERE,1,theEnd  Explain what a join is and when you would use one,1,theEnd  Use aggregate functions in database queries,0,theEnd  Design a database schema,0,theEnd  Connect a Ruby program to a database and run queries to both save and retrieve infromation,1,theEnd   ActiveRecord,3,theEnd  Explain what an ORM is,0,theEnd  Explain what ActiveRecord is,1,theEnd  Include ActiveRecord in a Sinatra app and configure the database connection,1,theEnd  Use ActiveRecord commands:,3,theEnd    new,1,theEnd    save,1,theEnd    create,1,theEnd    all,1,theEnd    find,1,theEnd    find_by,1,theEnd    where,1,theEnd    update_attributes,1,theEnd    delete vs destroy,1,theEnd  Build a Sinatra app using ActiveRecord ,1,theEnd  Set up an ActiveRecord Association for a one to many relationship,1,theEnd   Sinatra Other,3,theEnd  Explain the MVC software pattern,1,theEnd  Explain the design principle of separation of concerns,0,theEnd  Explain what the Gemfile and Bundler are and how they are used,1,theEnd  Configure an app and deploy it to Heroku,1,theEnd Week ,3,theEnd   General Rails,3,theEnd  Explain what Ruby on Rails is and it's architectural components using a diagram,0,theEnd  Explain what `convention over configuration` means and how it relates to Ruby on Rails,1,theEnd  Describe the lifecycle of an HTTP request in Ruby on Rails,1,theEnd"  Follow Rails naming conventions when creating models, views and controllers",1,theEnd"  Create a Rails App with CRUD actions (new, create, index, show, edit, update, destroy)",1,theEnd  Debug your Rails app by looking at error messages and using the rails console and pry,1,theEnd"  Explain what `fat models, skinny controllers` means",1,theEnd   Model,3,theEnd  Draw an ERD diagram to model relationships,1,theEnd  Build a Rails app with a one to many relationship,1,theEnd  Build a Rails app with a many to many relationship,1,theEnd  Create a database migration file to create or alter a database table,1,theEnd  Migrate the database,1,theEnd  Roll back migrations,1,theEnd  Create a seed file and seed a database,1,theEnd   View,3,theEnd  Define routes in a RESTful way using `resources`,1,theEnd  Use path helpers & `rake routes` to match routes to controller actions,1,theEnd  Use partials to DRY up your views,1,theEnd  Use link helpers,1,theEnd  Explain the difference between `form_for` and `form_tag` and when you would use each,0,theEnd  Use form helpers,1,theEnd  Write custom helper methods,1,theEnd   Controller,3,theEnd  Define controller actions for CRUD actions,1,theEnd  Implement before actions in the controller,1,theEnd  Explain strong parameters / whitelisting in Rails,1,theEnd  Explain the difference between redirect and render,1,theEnd   Auth,3,theEnd  Access and set session variables,1,theEnd  Explain the difference between Authentication and Authorization,1,theEnd  Write an application with auth using bcrypt,1,theEnd Week 5,3,theEnd  Asset Pipeline,3,theEnd  Explain what the Rails Asset Pipeline is and why it is used,1,theEnd  Include assets in the asset pipeline & use asset helpers in a Rails app,1,theEnd   Agile Development,3,theEnd  Explain what Agile Development is,1,theEnd  Explain what TDD/BDD stand for and articulate the philosophy and its benefits,1,theEnd  Develop an app incrementally using User Stories,1,theEnd   Rspec,3,theEnd  Explain what Rspec is,1,theEnd  Read Rspec tests that have already been written for a Ruby program and make them pass one at a time,0,theEnd Week 6,3,theEnd   JavaScript Basics,3,theEnd  Compare and contrast Ruby & JavaScript as programming languages,1,theEnd"  Describe the different types in JavaScript (numbers, strings, collections, etc.)",1,theEnd  Follow a JavaScript Style Guide,1,theEnd  Name variables and functions in a semantic way,1,theEnd  Explain the difference between `pass by reference` and `pass by value`,0,theEnd"  Create an array, access items in an array, change the value of items in an array",1,theEnd  Use a for loop for iteration,1,theEnd   JavaScript functions & Objects,3,theEnd  Define a function in JavaScript,1,theEnd  Explain the difference between calling and referencing a function in JavaScript,0,theEnd  Explain what prototypal inheritance is and how it differs from classical inheritance,1,theEnd  Create objects using literal notation,1,theEnd  Create objects using constructors and defining methods on the prototype,1,theEnd  Access property values in a JavaScript object,1,theEnd   JavaScript Scope,3,theEnd  Explain what the `window` refers to in JavaScript,1,theEnd  Use `var` to declare your variables in the current scope,1,theEnd  Explain what `this` refers to in various contexts,1,theEnd  Identify what creates a new scope JavaScript,1,theEnd   The DOM & Events,3,theEnd  Explain what the DOM is,1,theEnd  Write JavaScript code that runs after the window has loaded,1,theEnd  Create DOM elements,1,theEnd"  Select DOM elements by: id, class name, tag, or using a query selector",1,theEnd  Change the attributes or content of a DOM element,1,theEnd  Add and remove elements from the DOM,1,theEnd  Add event listeners,1,theEnd   Libraries,3,theEnd  Include functionality from another library,1,theEnd  Write functions for your own JavaScript library,1,theEnd  Explain what underscore.js is and when it is useful,1,theEnd   JavaScript Timers,3,theEnd  Use setTimeout to execute code after a specific delay,0,theEnd  Use setinterval & clearinterval to repeatedly execute code at specific intervals,0,theEnd  Programming Concepts,3,theEnd  Describe the idea of encapsulation and why it is so powerful,0,theEnd  Compare and contrast functional and object oriented programming,1,theEnd"  Given a problem or scenario, model the objects (data & behavior) you would use",0,theEnd Week 7,3,theEnd   AJAX,3,theEnd  Explain what JSON is and what it is used for,1,theEnd  Explain what AJAX is and why you would use it,1,theEnd  Make a GET request using XMLHttpRequest and handle a JSON response,1,theEnd  Explain what preventDefault does for a form,1,theEnd  Explain what a callback function is,0,theEnd   jQuery,3,theEnd  Reference the jQuery documentation to figure out things you don't know how to do,1,theEnd  Create a jQuery object,1,theEnd"  Select DOM elements by: id, class name, tag, or using a query selector",1,theEnd  Change the attributes or content of a DOM element,1,theEnd  Change the css of a DOM element,1,theEnd  Append and remove elements from the DOM,1,theEnd  Add event listeners using jQuery,1,theEnd  Explain what delegated events are,0,theEnd  Explain what stopPropagation does in relation to events,1,theEnd  Make AJAX requests using jQuery,1,theEnd   JavaScript & Rails,3,theEnd  Include JavaScript files in a Rails app,1,theEnd  Decide and defend what functionality should be implemented on the client side with JavaScript and what should be implemented on the server side with Rails,1,theEnd  Use AJAX in the context of a Rails app to GET information from the server,1,theEnd  Use AJAX in the context of a Rails app to POST information to the server,1,theEnd Week 8,3,theEnd   Project Management Tools & Project Planning,3,theEnd  Use Pivotal Tracker to manage User Stories,1,theEnd  Resolve merge conflicts in Github,1,theEnd  Hold a Daily Scrum with a team to prioritize and stay organized,1,theEnd  File Upload,3,theEnd  Explain why we would not store files directly in a Postgres Database,1,theEnd  Explain conceptually and draw a diagram of how file upload works,0,theEnd  Use a multi part form to upload files,0,theEnd  Interactive Interfaces,3,theEnd  Include and utilize a jQuery plugin or external library to create interactive UI components,1,theEnd  Compare HTML5 Canvas and SVG,0,theEnd  SASS,3,theEnd  Explain what a CSS pre processor is and why it is useful,0,theEnd  Use variables in SASS,0,theEnd  Nest CSS with SASS,0,theEnd Week 9 & 10,3,theEnd   Rspec,3,theEnd Explain the difference between BDD & TDD,0,theEnd Set up a Ruby program with Rspec,1,theEnd Set up Rspec tests using,3,theEnd   `describe`,1,theEnd   `context`,1,theEnd   `subject`,1,theEnd   `it`,1,theEnd   `before`,1,theEnd   `let`,1,theEnd Write tests using expectations,1,theEnd   `to` and `not_to`,1,theEnd"   `eq`, `eql`, `equal`",1,theEnd"   `be_true`, `be_false`",1,theEnd Set up a Rails app with Rspec (instead of Test::Unit),1,theEnd   Advanced Rails,3,theEnd Create a custom validator in Rails,0,theEnd Add complex logic to your models,0,theEnd Explain and implement single table inheritance,1,theEnd Explain and implement a self join ,0,theEnd  Programming concepts  ,3,theEnd Model a complex application (>5 models),1,theEnd" Break down a problem from Model, to User Stories, to Behavior, to Tests, to Code",1,theEnd Write meaningful Unit Tests at the appropriate place in the development workflow,0,theEnd Explain and follow the principles of good software design,1,theEnd   DRY,1,theEnd   Naming,0,theEnd   Test,1,theEnd   Small,1,theEnd  Regex,3,theEnd Write regular expressions in Ruby to match patterns of characters,1,theEnd Use regex to validate input and output,0,theEnd  Exception Handling,3,theEnd Explain what an exception / error is and when you might encounter one,0,theEnd Explain the call stack and the path an error takes,0,theEnd" Handle an exception in Ruby using begin, rescue, ensure",0,theEnd  Shoulda,3,theEnd Explain what shoulda matchers are and why they are useful,1,theEnd Use shoulda matchers for model validation,1,theEnd Use shoulda matchers for ActiveRecord associations,1,theEnd  Factory Girl,3,theEnd Explain what the factory girl gem does and why it is useful,1,theEnd Use factories to create test objects in Rails,1,theEnd  Capybara,3,theEnd Explain what acceptance testing is and why it is used,0,theEnd Explain what Capybara is and generally how it tests your app,0,theEnd Explain how acceptance testing fits into the Agile workflow,0,theEnd